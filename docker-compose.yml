version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ${ZOOKEEPER_CONTAINER_NAME}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:2181"
    restart: always
    env_file:
      - .env
    networks:
      - kafka-network


  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ${KAFKA_CONTAINER_NAME}
    ports:
      - "${KAFKA_PORT_NUMBER}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_CONTAINER_NAME}:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_CONTAINER_NAME}:${KAFKA_PORT_NUMBER},PLAINTEXT_INTERNAL://${KAFKA_CONTAINER_NAME}:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 2
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 20s
      interval: 10s
      timeout: 20s
      retries: 10
    restart: always
    networks:
      - kafka-network
    env_file:
      - .env
    depends_on:
      - ${ZOOKEEPER_CONTAINER_NAME}



  posts-service:
    container_name: ${POSTS_SERVICE_CONTAINER_NAME}
    build:
      context: ./posts_service
      dockerfile: Dockerfile
    ports:
      - "${POSTS_SERVICE_PORT_NUMBER}:80"
    depends_on:
      kafka:
        condition: service_healthy
      posts-service-mongodb:
        condition: service_healthy
    env_file:
      - /posts_service/.env
    restart: always
    networks:
      - posts-service-network
      - kafka-network

  posts-service-mongodb:
    container_name: ${POSTS_SERVICE_MONGODB_CONTAINER_NAME}
    image: mongo:latest
    ports:
      - "${POSTS_SERVICE_MONGODB_PORT_NUMBER}:27017"
    environment:
      - TZ=UTC
    volumes:
      - posts-service-volume:/data/db
    env_file:
      - /posts_service/.env
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - posts-service-network

  comments-service:
    container_name: ${COMMENTS_SERVICE_CONTAINER_NAME}
    build:
      context: ./comments_service
      dockerfile: Dockerfile
    ports:
      - "${COMMENTS_SERVICE_PORT_NUMBER}:80"
    depends_on:
      kafka:
        condition: service_healthy
      comments-service-mongodb:
        condition: service_healthy
    env_file:
      - /comments_service/.env
    restart: always
    networks:
      - comments-service-network
      - kafka-network

  comments-service-mongodb:
    container_name: ${COMMENTS_SERVICE_MONGODB_CONTAINER_NAME}
    image: mongo:latest
    ports:
      - "${COMMENTS_SERVICE_MONGODB_PORT_NUMBER}:27017"
    environment:
      - TZ=UTC
    volumes:
      - comments-service-volume:/data/db
    env_file:
      - /comments_service/.env
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - comments-service-network

networks:
  posts-service-network:
    driver: bridge
  comments-service-network:
    driver: bridge
  kafka-network:
    driver: bridge

volumes:
  posts-service-volume:
  comments-service-volume:

