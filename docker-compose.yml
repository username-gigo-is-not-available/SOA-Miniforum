version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ${ZOOKEEPER_CONTAINER_NAME}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:2181"
    restart: always
    env_file:
      - .env
    networks:
      - message-broker-network


  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ${KAFKA_CONTAINER_NAME}
    ports:
      - "${KAFKA_PORT_NUMBER}:9092"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 20s
      interval: 10s
      timeout: 20s
      retries: 15
    restart: on-failure
    networks:
      - message-broker-network
    env_file:
      - .env
    depends_on:
      - ${ZOOKEEPER_CONTAINER_NAME}

  kong:
    image: kong:latest
    container_name: ${API_GATEWAY_CONTAINER_NAME}
    volumes:
      - ./api-gateway/kong.yaml:/usr/local/kong/declarative/kong.yml
    env_file:
      - api-gateway/.env
    ports:
      - "${API_GATEWAY_PORT_NUMBER}:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    networks:
      - api-gateway-network


  user-management-service:
    container_name: ${USER_MANAGEMENT_SERVICE_CONTAINER_NAME}
    build:
      context: user-management-service
      dockerfile: Dockerfile
    ports:
      - "${USER_MANAGEMENT_SERVICE_PORT_NUMBER}:80"
    depends_on:
      kafka:
        condition: service_healthy
      user-management-service-redis:
        condition: service_healthy
    env_file:
      - user-management-service/.env
    restart: always
    networks:
      - user-management-service-network
      - message-broker-network
      - api-gateway-network

  user-management-service-redis:
    container_name: ${USER_MANAGEMENT_SERVICE_REDIS_CONTAINER_NAME}
    image: redis:latest
    ports:
      - "${USER_MANAGEMENT_SERVICE_REDIS_PORT_NUMBER}:6379"
    volumes:
      - user-service-volume:/data
    env_file:
      - user-management-service/.env
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - user-management-service-network


  posts-service:
    container_name: ${POSTS_SERVICE_CONTAINER_NAME}
    build:
      context: posts-service
      dockerfile: Dockerfile
    ports:
      - "${POSTS_SERVICE_PORT_NUMBER}:80"
    depends_on:
      kafka:
        condition: service_healthy
      posts-service-mongodb:
        condition: service_healthy
    env_file:
      - posts-service/.env
    restart: always
    networks:
      - posts-service-network
      - message-broker-network
      - api-gateway-network

  posts-service-mongodb:
    container_name: ${POSTS_SERVICE_MONGODB_CONTAINER_NAME}
    image: mongo:latest
    ports:
      - "${POSTS_SERVICE_MONGODB_PORT_NUMBER}:27017"
    volumes:
      - posts-service-volume:/data/db
    env_file:
      - posts-service/.env
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - posts-service-network

  comments-service:
    container_name: ${COMMENTS_SERVICE_CONTAINER_NAME}
    build:
      context: comments-service
      dockerfile: Dockerfile
    ports:
      - "${COMMENTS_SERVICE_PORT_NUMBER}:80"
    depends_on:
      kafka:
        condition: service_healthy
      comments-service-mongodb:
        condition: service_healthy
    env_file:
      - comments-service/.env
    restart: always
    networks:
      - comments-service-network
      - message-broker-network
      - api-gateway-network

  comments-service-mongodb:
    container_name: ${COMMENTS_SERVICE_MONGODB_CONTAINER_NAME}
    image: mongo:latest
    ports:
      - "${COMMENTS_SERVICE_MONGODB_PORT_NUMBER}:27017"
    volumes:
      - comments-service-volume:/data/db
    env_file:
      - comments-service/.env
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - comments-service-network

networks:
  posts-service-network:
    driver: bridge
  comments-service-network:
    driver: bridge
  message-broker-network:
    driver: bridge
  user-management-service-network:
    driver: bridge
  api-gateway-network:
    driver: bridge

volumes:
  posts-service-volume:
  comments-service-volume:
  user-service-volume:

